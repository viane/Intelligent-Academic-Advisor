'use strict';

var mongoose = require('mongoose');
var Schema = mongoose.Schema;
var passportLocalMongoose = require('passport-local-mongoose');

var User = new Schema({
    password: String,
    OauthId: String,
    OauthToken: String,
    first_name: {
        type: String,
        required: true
    },
    last_name: {
        type: String,
        required: true
    },
    major: [{
        type: mongoose.Schema.Types.ObjectId,
        ref: 'Major'
    }],
    email: {
        type: String,
        required: true,
        unique: true
    },
    account_role: {
        type: String
    },
    question_history: [{
        type: mongoose.Schema.Types.ObjectId,
        ref: 'Question'
    }],
    interest: [{
        type: mongoose.Schema.Types.Mixed
    }],
    interest_manual: [{
        type: mongoose.Schema.Types.Mixed
    }],
    inbox: [{
        type: mongoose.Schema.Types.Mixed
    }],
    personality_evaluation: {
        type: mongoose.Schema.Types.ObjectId,
        ref: 'PersonalityAssessement'
    },
    assessement: [{
        type: mongoose.Schema.Types.ObjectId,
        ref: 'Assessement'
    }],
    status: {
        type: String,
        default: "inactive"
    },
    activation_code: String
});

User.methods.getName = function () {
    return this.firstname + ' ' + this.lastname;
};

User.plugin(passportLocalMongoose, { 'usernameField': 'email' });

module.exports = mongoose.model('User', User);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9tb2RlbHMvdXNlci5qcyJdLCJuYW1lcyI6WyJtb25nb29zZSIsInJlcXVpcmUiLCJTY2hlbWEiLCJwYXNzcG9ydExvY2FsTW9uZ29vc2UiLCJVc2VyIiwicGFzc3dvcmQiLCJTdHJpbmciLCJPYXV0aElkIiwiT2F1dGhUb2tlbiIsImZpcnN0X25hbWUiLCJ0eXBlIiwicmVxdWlyZWQiLCJsYXN0X25hbWUiLCJtYWpvciIsIlR5cGVzIiwiT2JqZWN0SWQiLCJyZWYiLCJlbWFpbCIsInVuaXF1ZSIsImFjY291bnRfcm9sZSIsInF1ZXN0aW9uX2hpc3RvcnkiLCJpbnRlcmVzdCIsIk1peGVkIiwiaW50ZXJlc3RfbWFudWFsIiwiaW5ib3giLCJwZXJzb25hbGl0eV9ldmFsdWF0aW9uIiwiYXNzZXNzZW1lbnQiLCJzdGF0dXMiLCJkZWZhdWx0IiwiYWN0aXZhdGlvbl9jb2RlIiwibWV0aG9kcyIsImdldE5hbWUiLCJmaXJzdG5hbWUiLCJsYXN0bmFtZSIsInBsdWdpbiIsIm1vZHVsZSIsImV4cG9ydHMiLCJtb2RlbCJdLCJtYXBwaW5ncyI6Ijs7QUFBQSxJQUFJQSxXQUFXQyxRQUFRLFVBQVIsQ0FBZjtBQUNBLElBQUlDLFNBQVNGLFNBQVNFLE1BQXRCO0FBQ0EsSUFBSUMsd0JBQXdCRixRQUFRLHlCQUFSLENBQTVCOztBQUVBLElBQUlHLE9BQU8sSUFBSUYsTUFBSixDQUFXO0FBQ2xCRyxjQUFVQyxNQURRO0FBRWxCQyxhQUFTRCxNQUZTO0FBR2xCRSxnQkFBWUYsTUFITTtBQUlsQkcsZ0JBQVk7QUFDUkMsY0FBTUosTUFERTtBQUVSSyxrQkFBVTtBQUZGLEtBSk07QUFRbEJDLGVBQVc7QUFDUEYsY0FBTUosTUFEQztBQUVQSyxrQkFBVTtBQUZILEtBUk87QUFZbEJFLFdBQU8sQ0FBQztBQUNKSCxjQUFNVixTQUFTRSxNQUFULENBQWdCWSxLQUFoQixDQUFzQkMsUUFEeEI7QUFFSkMsYUFBSztBQUZELEtBQUQsQ0FaVztBQWdCbEJDLFdBQU07QUFDRlAsY0FBTUosTUFESjtBQUVGSyxrQkFBVSxJQUZSO0FBR0ZPLGdCQUFRO0FBSE4sS0FoQlk7QUFxQmxCQyxrQkFBYTtBQUNUVCxjQUFNSjtBQURHLEtBckJLO0FBd0JsQmMsc0JBQWlCLENBQUM7QUFDZFYsY0FBTVYsU0FBU0UsTUFBVCxDQUFnQlksS0FBaEIsQ0FBc0JDLFFBRGQ7QUFFZEMsYUFBSztBQUZTLEtBQUQsQ0F4QkM7QUE0QmxCSyxjQUFVLENBQUM7QUFDUFgsY0FBTVYsU0FBU0UsTUFBVCxDQUFnQlksS0FBaEIsQ0FBc0JRO0FBRHJCLEtBQUQsQ0E1QlE7QUErQmxCQyxxQkFBZ0IsQ0FBQztBQUNiYixjQUFLVixTQUFTRSxNQUFULENBQWdCWSxLQUFoQixDQUFzQlE7QUFEZCxLQUFELENBL0JFO0FBa0NsQkUsV0FBTSxDQUFDO0FBQ0hkLGNBQUtWLFNBQVNFLE1BQVQsQ0FBZ0JZLEtBQWhCLENBQXNCUTtBQUR4QixLQUFELENBbENZO0FBcUNsQkcsNEJBQXVCO0FBQ25CZixjQUFNVixTQUFTRSxNQUFULENBQWdCWSxLQUFoQixDQUFzQkMsUUFEVDtBQUVuQkMsYUFBSztBQUZjLEtBckNMO0FBeUNsQlUsaUJBQVksQ0FBQztBQUNUaEIsY0FBTVYsU0FBU0UsTUFBVCxDQUFnQlksS0FBaEIsQ0FBc0JDLFFBRG5CO0FBRVRDLGFBQUs7QUFGSSxLQUFELENBekNNO0FBNkNsQlcsWUFBTztBQUNIakIsY0FBS0osTUFERjtBQUVIc0IsaUJBQVE7QUFGTCxLQTdDVztBQWlEbEJDLHFCQUFpQnZCO0FBakRDLENBQVgsQ0FBWDs7QUFvREFGLEtBQUswQixPQUFMLENBQWFDLE9BQWIsR0FBdUIsWUFBVztBQUM5QixXQUFRLEtBQUtDLFNBQUwsR0FBaUIsR0FBakIsR0FBdUIsS0FBS0MsUUFBcEM7QUFDSCxDQUZEOztBQUlBN0IsS0FBSzhCLE1BQUwsQ0FBWS9CLHFCQUFaLEVBQWtDLEVBQUMsaUJBQWdCLE9BQWpCLEVBQWxDOztBQUVBZ0MsT0FBT0MsT0FBUCxHQUFpQnBDLFNBQVNxQyxLQUFULENBQWUsTUFBZixFQUF1QmpDLElBQXZCLENBQWpCIiwiZmlsZSI6InVzZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgbW9uZ29vc2UgPSByZXF1aXJlKCdtb25nb29zZScpO1xudmFyIFNjaGVtYSA9IG1vbmdvb3NlLlNjaGVtYTtcbnZhciBwYXNzcG9ydExvY2FsTW9uZ29vc2UgPSByZXF1aXJlKCdwYXNzcG9ydC1sb2NhbC1tb25nb29zZScpO1xuXG52YXIgVXNlciA9IG5ldyBTY2hlbWEoe1xuICAgIHBhc3N3b3JkOiBTdHJpbmcsXG4gICAgT2F1dGhJZDogU3RyaW5nLFxuICAgIE9hdXRoVG9rZW46IFN0cmluZyxcbiAgICBmaXJzdF9uYW1lOiB7XG4gICAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgICAgcmVxdWlyZWQ6IHRydWVcbiAgICB9LFxuICAgIGxhc3RfbmFtZToge1xuICAgICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICAgIHJlcXVpcmVkOiB0cnVlXG4gICAgfSxcbiAgICBtYWpvcjogW3tcbiAgICAgICAgdHlwZTogbW9uZ29vc2UuU2NoZW1hLlR5cGVzLk9iamVjdElkLFxuICAgICAgICByZWY6ICdNYWpvcidcbiAgICB9XSxcbiAgICBlbWFpbDp7XG4gICAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgICAgcmVxdWlyZWQ6IHRydWUsXG4gICAgICAgIHVuaXF1ZTogdHJ1ZVxuICAgIH0sXG4gICAgYWNjb3VudF9yb2xlOntcbiAgICAgICAgdHlwZTogU3RyaW5nXG4gICAgfSxcbiAgICBxdWVzdGlvbl9oaXN0b3J5Olt7XG4gICAgICAgIHR5cGU6IG1vbmdvb3NlLlNjaGVtYS5UeXBlcy5PYmplY3RJZCxcbiAgICAgICAgcmVmOiAnUXVlc3Rpb24nXG4gICAgfV0sXG4gICAgaW50ZXJlc3Q6IFt7XG4gICAgICAgIHR5cGU6IG1vbmdvb3NlLlNjaGVtYS5UeXBlcy5NaXhlZFxuICAgIH1dLFxuICAgIGludGVyZXN0X21hbnVhbDpbe1xuICAgICAgICB0eXBlOm1vbmdvb3NlLlNjaGVtYS5UeXBlcy5NaXhlZFxuICAgIH1dLFxuICAgIGluYm94Olt7XG4gICAgICAgIHR5cGU6bW9uZ29vc2UuU2NoZW1hLlR5cGVzLk1peGVkXG4gICAgfV0sXG4gICAgcGVyc29uYWxpdHlfZXZhbHVhdGlvbjp7XG4gICAgICAgIHR5cGU6IG1vbmdvb3NlLlNjaGVtYS5UeXBlcy5PYmplY3RJZCxcbiAgICAgICAgcmVmOiAnUGVyc29uYWxpdHlBc3Nlc3NlbWVudCdcbiAgICB9LFxuICAgIGFzc2Vzc2VtZW50Olt7XG4gICAgICAgIHR5cGU6IG1vbmdvb3NlLlNjaGVtYS5UeXBlcy5PYmplY3RJZCxcbiAgICAgICAgcmVmOiAnQXNzZXNzZW1lbnQnXG4gICAgfV0sXG4gICAgc3RhdHVzOntcbiAgICAgICAgdHlwZTpTdHJpbmcsXG4gICAgICAgIGRlZmF1bHQ6XCJpbmFjdGl2ZVwiXG4gICAgfSxcbiAgICBhY3RpdmF0aW9uX2NvZGU6IFN0cmluZ1xufSk7XG5cblVzZXIubWV0aG9kcy5nZXROYW1lID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuICh0aGlzLmZpcnN0bmFtZSArICcgJyArIHRoaXMubGFzdG5hbWUpO1xufTtcblxuVXNlci5wbHVnaW4ocGFzc3BvcnRMb2NhbE1vbmdvb3NlLHsndXNlcm5hbWVGaWVsZCc6J2VtYWlsJ30pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IG1vbmdvb3NlLm1vZGVsKCdVc2VyJywgVXNlcik7XG4iXX0=