'use strict';

var _formatter = require('./formatter');

var _formatter2 = _interopRequireDefault(_formatter);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var naturalLanguageUnderstanding = require('../watson/natural-language-understanding');

module.exports.NLUAnalysis = function (inputString) {
    return new Promise(function (resolve, reject) {
        naturalLanguageUnderstanding.getAnalysis(inputString).then(function (analysis) {
            resolve(analysis);
        }).catch(function (err) {
            throw err;
            reject(err);
        });
    });
};

module.exports.parseQuestionObj = function (input, analysis) {
    var question = {};
    // each componment is an array of objects
    question.body = input;

    // add AI readable section that is transfromed from concepts/entities/taxonomy/keywords into one vector

    var AI_Read_Vector = "";

    AI_Read_Vector = AI_Read_Vector.concat(_formatter2.default.convertPerspectsToAIReadable("concept", analysis.concepts));

    AI_Read_Vector = AI_Read_Vector.concat(_formatter2.default.convertPerspectsToAIReadable("entity", analysis.entities));

    AI_Read_Vector = AI_Read_Vector.concat(_formatter2.default.convertPerspectsToAIReadable("keyword", analysis.keywords));

    question.AI_Read_Body = AI_Read_Vector;
    return question;
};

module.exports.updateQuestionToServerFeeds = function (question) {};

module.exports.logUserQuestion = function (user, question) {
    return new Promise(function (resolve, reject) {
        resolve();
    });
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zeXN0ZW0vdXRpbGl0eS9wcm9jZXNzLXF1ZXN0aW9uLmpzIl0sIm5hbWVzIjpbIm5hdHVyYWxMYW5ndWFnZVVuZGVyc3RhbmRpbmciLCJyZXF1aXJlIiwibW9kdWxlIiwiZXhwb3J0cyIsIk5MVUFuYWx5c2lzIiwiaW5wdXRTdHJpbmciLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsImdldEFuYWx5c2lzIiwidGhlbiIsImFuYWx5c2lzIiwiY2F0Y2giLCJlcnIiLCJwYXJzZVF1ZXN0aW9uT2JqIiwiaW5wdXQiLCJxdWVzdGlvbiIsImJvZHkiLCJBSV9SZWFkX1ZlY3RvciIsImNvbmNhdCIsImNvbnZlcnRQZXJzcGVjdHNUb0FJUmVhZGFibGUiLCJjb25jZXB0cyIsImVudGl0aWVzIiwia2V5d29yZHMiLCJBSV9SZWFkX0JvZHkiLCJ1cGRhdGVRdWVzdGlvblRvU2VydmVyRmVlZHMiLCJsb2dVc2VyUXVlc3Rpb24iLCJ1c2VyIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFDQTs7Ozs7O0FBQ0EsSUFBTUEsK0JBQStCQyxRQUFRLDBDQUFSLENBQXJDOztBQUdBQyxPQUFPQyxPQUFQLENBQWVDLFdBQWYsR0FBNkIsVUFBU0MsV0FBVCxFQUFzQjtBQUMvQyxXQUFPLElBQUlDLE9BQUosQ0FBWSxVQUFTQyxPQUFULEVBQWtCQyxNQUFsQixFQUEwQjtBQUN6Q1IscUNBQTZCUyxXQUE3QixDQUF5Q0osV0FBekMsRUFBc0RLLElBQXRELENBQTJELFVBQVNDLFFBQVQsRUFBbUI7QUFDMUVKLG9CQUFRSSxRQUFSO0FBQ0gsU0FGRCxFQUVHQyxLQUZILENBRVMsVUFBU0MsR0FBVCxFQUFjO0FBQ25CLGtCQUFNQSxHQUFOO0FBQ0FMLG1CQUFPSyxHQUFQO0FBQ0gsU0FMRDtBQU1ILEtBUE0sQ0FBUDtBQVNILENBVkQ7O0FBWUFYLE9BQU9DLE9BQVAsQ0FBZVcsZ0JBQWYsR0FBa0MsVUFBU0MsS0FBVCxFQUFnQkosUUFBaEIsRUFBMEI7QUFDeEQsUUFBSUssV0FBVyxFQUFmO0FBQ0E7QUFDQUEsYUFBU0MsSUFBVCxHQUFnQkYsS0FBaEI7O0FBRUE7O0FBRUEsUUFBSUcsaUJBQWlCLEVBQXJCOztBQUVBQSxxQkFBaUJBLGVBQWVDLE1BQWYsQ0FBc0Isb0JBQVVDLDRCQUFWLENBQXVDLFNBQXZDLEVBQWtEVCxTQUFTVSxRQUEzRCxDQUF0QixDQUFqQjs7QUFFQUgscUJBQWlCQSxlQUFlQyxNQUFmLENBQXNCLG9CQUFVQyw0QkFBVixDQUF1QyxRQUF2QyxFQUFpRFQsU0FBU1csUUFBMUQsQ0FBdEIsQ0FBakI7O0FBRUFKLHFCQUFpQkEsZUFBZUMsTUFBZixDQUFzQixvQkFBVUMsNEJBQVYsQ0FBdUMsU0FBdkMsRUFBa0RULFNBQVNZLFFBQTNELENBQXRCLENBQWpCOztBQUVBUCxhQUFTUSxZQUFULEdBQXdCTixjQUF4QjtBQUNBLFdBQU9GLFFBQVA7QUFDSCxDQWpCRDs7QUFtQkFkLE9BQU9DLE9BQVAsQ0FBZXNCLDJCQUFmLEdBQTZDLFVBQUNULFFBQUQsRUFBYyxDQUUxRCxDQUZEOztBQUlBZCxPQUFPQyxPQUFQLENBQWV1QixlQUFmLEdBQWlDLFVBQVNDLElBQVQsRUFBZVgsUUFBZixFQUF5QjtBQUN0RCxXQUFPLElBQUlWLE9BQUosQ0FBWSxVQUFDQyxPQUFELEVBQVVDLE1BQVYsRUFBcUI7QUFDcENEO0FBQ0gsS0FGTSxDQUFQO0FBR0gsQ0FKRCIsImZpbGUiOiJwcm9jZXNzLXF1ZXN0aW9uLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5pbXBvcnQgZm9ybWF0dGVyIGZyb20gJy4vZm9ybWF0dGVyJztcbmNvbnN0IG5hdHVyYWxMYW5ndWFnZVVuZGVyc3RhbmRpbmcgPSByZXF1aXJlKCcuLi93YXRzb24vbmF0dXJhbC1sYW5ndWFnZS11bmRlcnN0YW5kaW5nJyk7XG5cblxubW9kdWxlLmV4cG9ydHMuTkxVQW5hbHlzaXMgPSBmdW5jdGlvbihpbnB1dFN0cmluZykge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgbmF0dXJhbExhbmd1YWdlVW5kZXJzdGFuZGluZy5nZXRBbmFseXNpcyhpbnB1dFN0cmluZykudGhlbihmdW5jdGlvbihhbmFseXNpcykge1xuICAgICAgICAgICAgcmVzb2x2ZShhbmFseXNpcyk7XG4gICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uKGVycikge1xuICAgICAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICAgIH0pO1xuICAgIH0pO1xuXG59O1xuXG5tb2R1bGUuZXhwb3J0cy5wYXJzZVF1ZXN0aW9uT2JqID0gZnVuY3Rpb24oaW5wdXQsIGFuYWx5c2lzKSB7XG4gICAgbGV0IHF1ZXN0aW9uID0ge307XG4gICAgLy8gZWFjaCBjb21wb25tZW50IGlzIGFuIGFycmF5IG9mIG9iamVjdHNcbiAgICBxdWVzdGlvbi5ib2R5ID0gaW5wdXQ7XG5cbiAgICAvLyBhZGQgQUkgcmVhZGFibGUgc2VjdGlvbiB0aGF0IGlzIHRyYW5zZnJvbWVkIGZyb20gY29uY2VwdHMvZW50aXRpZXMvdGF4b25vbXkva2V5d29yZHMgaW50byBvbmUgdmVjdG9yXG5cbiAgICBsZXQgQUlfUmVhZF9WZWN0b3IgPSBcIlwiO1xuXG4gICAgQUlfUmVhZF9WZWN0b3IgPSBBSV9SZWFkX1ZlY3Rvci5jb25jYXQoZm9ybWF0dGVyLmNvbnZlcnRQZXJzcGVjdHNUb0FJUmVhZGFibGUoXCJjb25jZXB0XCIsIGFuYWx5c2lzLmNvbmNlcHRzKSk7XG5cbiAgICBBSV9SZWFkX1ZlY3RvciA9IEFJX1JlYWRfVmVjdG9yLmNvbmNhdChmb3JtYXR0ZXIuY29udmVydFBlcnNwZWN0c1RvQUlSZWFkYWJsZShcImVudGl0eVwiLCBhbmFseXNpcy5lbnRpdGllcykpO1xuXG4gICAgQUlfUmVhZF9WZWN0b3IgPSBBSV9SZWFkX1ZlY3Rvci5jb25jYXQoZm9ybWF0dGVyLmNvbnZlcnRQZXJzcGVjdHNUb0FJUmVhZGFibGUoXCJrZXl3b3JkXCIsIGFuYWx5c2lzLmtleXdvcmRzKSk7XG5cbiAgICBxdWVzdGlvbi5BSV9SZWFkX0JvZHkgPSBBSV9SZWFkX1ZlY3RvcjtcbiAgICByZXR1cm4gcXVlc3Rpb247XG59O1xuXG5tb2R1bGUuZXhwb3J0cy51cGRhdGVRdWVzdGlvblRvU2VydmVyRmVlZHMgPSAocXVlc3Rpb24pID0+IHtcblxufTtcblxubW9kdWxlLmV4cG9ydHMubG9nVXNlclF1ZXN0aW9uID0gZnVuY3Rpb24odXNlciwgcXVlc3Rpb24pIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICByZXNvbHZlKCk7XG4gICAgfSk7XG59XG4iXX0=