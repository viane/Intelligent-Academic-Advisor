'use strict';

var express = require('express');
var path = require('path');
var favicon = require('serve-favicon');
var logger = require('morgan');
var cookieParser = require('cookie-parser');
var bodyParser = require('body-parser');
var mongoose = require('mongoose');
var passport = require('passport');
var authenticate = require('./authenticate');
var config = require('./config');

var flash = require('connect-flash');
var nodemon = require('nodemon');

mongoose.connect(config.mongoUrl);
var db = mongoose.connection;
db.on('error', console.error.bind(console, 'connection error:'));
db.once('open', function () {
  // we're connected!
  console.log("Connected correctly to server");
});

var app = express();

app.all('*', function (req, res, next) {
  console.log('req start: ', req.secure, req.hostname, req.url, app.get('port'));
  if (req.secure) {
    return next();
  };

  res.redirect('https://' + req.hostname + ':' + app.get('secPort') + req.url);
});
// uncomment after placing your favicon in /public
//app.use(favicon(path.join(__dirname, 'public', 'favicon.ico')));

app.use(logger('dev'));
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: false }));
app.use(cookieParser());

// passport config
app.use(passport.initialize());

app.use(express.static(path.join(__dirname, 'views')));
require('./routes/index')(app);

// catch 404 and forward to error handler
app.use(function (req, res, next) {
  var err = new Error('Not Found');
  err.status = 404;
  next(err);
});

// error handlers
// development error handler
// will print stacktrace
if (app.get('env') === 'development') {
  app.use(function (err, req, res, next) {
    res.status(err.status || 500);
    res.json({
      message: err.message,
      error: err
    });
  });
}

// production error handler
// no stacktraces leaked to user
app.use(function (err, req, res, next) {
  res.status(err.status || 500);
  res.json({
    message: err.message,
    error: {}
  });
});

// init routes


module.exports = app;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9hcHAuanMiXSwibmFtZXMiOlsiZXhwcmVzcyIsInJlcXVpcmUiLCJwYXRoIiwiZmF2aWNvbiIsImxvZ2dlciIsImNvb2tpZVBhcnNlciIsImJvZHlQYXJzZXIiLCJtb25nb29zZSIsInBhc3Nwb3J0IiwiYXV0aGVudGljYXRlIiwiY29uZmlnIiwiZmxhc2giLCJub2RlbW9uIiwiY29ubmVjdCIsIm1vbmdvVXJsIiwiZGIiLCJjb25uZWN0aW9uIiwib24iLCJjb25zb2xlIiwiZXJyb3IiLCJiaW5kIiwib25jZSIsImxvZyIsImFwcCIsImFsbCIsInJlcSIsInJlcyIsIm5leHQiLCJzZWN1cmUiLCJob3N0bmFtZSIsInVybCIsImdldCIsInJlZGlyZWN0IiwidXNlIiwianNvbiIsInVybGVuY29kZWQiLCJleHRlbmRlZCIsImluaXRpYWxpemUiLCJzdGF0aWMiLCJqb2luIiwiX19kaXJuYW1lIiwiZXJyIiwiRXJyb3IiLCJzdGF0dXMiLCJtZXNzYWdlIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6Ijs7QUFBQSxJQUFJQSxVQUFVQyxRQUFRLFNBQVIsQ0FBZDtBQUNBLElBQUlDLE9BQU9ELFFBQVEsTUFBUixDQUFYO0FBQ0EsSUFBSUUsVUFBVUYsUUFBUSxlQUFSLENBQWQ7QUFDQSxJQUFJRyxTQUFTSCxRQUFRLFFBQVIsQ0FBYjtBQUNBLElBQUlJLGVBQWVKLFFBQVEsZUFBUixDQUFuQjtBQUNBLElBQUlLLGFBQWFMLFFBQVEsYUFBUixDQUFqQjtBQUNBLElBQUlNLFdBQVdOLFFBQVEsVUFBUixDQUFmO0FBQ0EsSUFBSU8sV0FBV1AsUUFBUSxVQUFSLENBQWY7QUFDQSxJQUFJUSxlQUFlUixRQUFRLGdCQUFSLENBQW5CO0FBQ0EsSUFBSVMsU0FBU1QsUUFBUSxVQUFSLENBQWI7O0FBRUEsSUFBTVUsUUFBUVYsUUFBUSxlQUFSLENBQWQ7QUFDQSxJQUFNVyxVQUFVWCxRQUFRLFNBQVIsQ0FBaEI7O0FBRUFNLFNBQVNNLE9BQVQsQ0FBaUJILE9BQU9JLFFBQXhCO0FBQ0EsSUFBSUMsS0FBS1IsU0FBU1MsVUFBbEI7QUFDQUQsR0FBR0UsRUFBSCxDQUFNLE9BQU4sRUFBZUMsUUFBUUMsS0FBUixDQUFjQyxJQUFkLENBQW1CRixPQUFuQixFQUE0QixtQkFBNUIsQ0FBZjtBQUNBSCxHQUFHTSxJQUFILENBQVEsTUFBUixFQUFnQixZQUFZO0FBQ3hCO0FBQ0FILFVBQVFJLEdBQVIsQ0FBWSwrQkFBWjtBQUNILENBSEQ7O0FBS0EsSUFBSUMsTUFBTXZCLFNBQVY7O0FBR0F1QixJQUFJQyxHQUFKLENBQVEsR0FBUixFQUFhLFVBQVNDLEdBQVQsRUFBY0MsR0FBZCxFQUFtQkMsSUFBbkIsRUFBd0I7QUFDbkNULFVBQVFJLEdBQVIsQ0FBWSxhQUFaLEVBQTBCRyxJQUFJRyxNQUE5QixFQUFzQ0gsSUFBSUksUUFBMUMsRUFBb0RKLElBQUlLLEdBQXhELEVBQTZEUCxJQUFJUSxHQUFKLENBQVEsTUFBUixDQUE3RDtBQUNBLE1BQUlOLElBQUlHLE1BQVIsRUFBZ0I7QUFDZCxXQUFPRCxNQUFQO0FBQ0Q7O0FBRUZELE1BQUlNLFFBQUosQ0FBYSxhQUFXUCxJQUFJSSxRQUFmLEdBQXdCLEdBQXhCLEdBQTRCTixJQUFJUSxHQUFKLENBQVEsU0FBUixDQUE1QixHQUErQ04sSUFBSUssR0FBaEU7QUFDQSxDQVBEO0FBUUE7QUFDQTs7QUFFQVAsSUFBSVUsR0FBSixDQUFRN0IsT0FBTyxLQUFQLENBQVI7QUFDQW1CLElBQUlVLEdBQUosQ0FBUTNCLFdBQVc0QixJQUFYLEVBQVI7QUFDQVgsSUFBSVUsR0FBSixDQUFRM0IsV0FBVzZCLFVBQVgsQ0FBc0IsRUFBRUMsVUFBVSxLQUFaLEVBQXRCLENBQVI7QUFDQWIsSUFBSVUsR0FBSixDQUFRNUIsY0FBUjs7QUFFQTtBQUNBa0IsSUFBSVUsR0FBSixDQUFRekIsU0FBUzZCLFVBQVQsRUFBUjs7QUFFQWQsSUFBSVUsR0FBSixDQUFRakMsUUFBUXNDLE1BQVIsQ0FBZXBDLEtBQUtxQyxJQUFMLENBQVVDLFNBQVYsRUFBcUIsT0FBckIsQ0FBZixDQUFSO0FBQ0F2QyxRQUFRLGdCQUFSLEVBQTBCc0IsR0FBMUI7O0FBRUE7QUFDQUEsSUFBSVUsR0FBSixDQUFRLFVBQVNSLEdBQVQsRUFBY0MsR0FBZCxFQUFtQkMsSUFBbkIsRUFBeUI7QUFDL0IsTUFBSWMsTUFBTSxJQUFJQyxLQUFKLENBQVUsV0FBVixDQUFWO0FBQ0FELE1BQUlFLE1BQUosR0FBYSxHQUFiO0FBQ0FoQixPQUFLYyxHQUFMO0FBQ0QsQ0FKRDs7QUFPQTtBQUNBO0FBQ0E7QUFDQSxJQUFJbEIsSUFBSVEsR0FBSixDQUFRLEtBQVIsTUFBbUIsYUFBdkIsRUFBc0M7QUFDcENSLE1BQUlVLEdBQUosQ0FBUSxVQUFTUSxHQUFULEVBQWNoQixHQUFkLEVBQW1CQyxHQUFuQixFQUF3QkMsSUFBeEIsRUFBOEI7QUFDcENELFFBQUlpQixNQUFKLENBQVdGLElBQUlFLE1BQUosSUFBYyxHQUF6QjtBQUNBakIsUUFBSVEsSUFBSixDQUFTO0FBQ1BVLGVBQVNILElBQUlHLE9BRE47QUFFUHpCLGFBQU9zQjtBQUZBLEtBQVQ7QUFJRCxHQU5EO0FBT0Q7O0FBRUQ7QUFDQTtBQUNBbEIsSUFBSVUsR0FBSixDQUFRLFVBQVNRLEdBQVQsRUFBY2hCLEdBQWQsRUFBbUJDLEdBQW5CLEVBQXdCQyxJQUF4QixFQUE4QjtBQUNwQ0QsTUFBSWlCLE1BQUosQ0FBV0YsSUFBSUUsTUFBSixJQUFjLEdBQXpCO0FBQ0FqQixNQUFJUSxJQUFKLENBQVM7QUFDUFUsYUFBU0gsSUFBSUcsT0FETjtBQUVQekIsV0FBTztBQUZBLEdBQVQ7QUFJRCxDQU5EOztBQVFBOzs7QUFHQTBCLE9BQU9DLE9BQVAsR0FBaUJ2QixHQUFqQiIsImZpbGUiOiJhcHAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgZXhwcmVzcyA9IHJlcXVpcmUoJ2V4cHJlc3MnKTtcbnZhciBwYXRoID0gcmVxdWlyZSgncGF0aCcpO1xudmFyIGZhdmljb24gPSByZXF1aXJlKCdzZXJ2ZS1mYXZpY29uJyk7XG52YXIgbG9nZ2VyID0gcmVxdWlyZSgnbW9yZ2FuJyk7XG52YXIgY29va2llUGFyc2VyID0gcmVxdWlyZSgnY29va2llLXBhcnNlcicpO1xudmFyIGJvZHlQYXJzZXIgPSByZXF1aXJlKCdib2R5LXBhcnNlcicpO1xudmFyIG1vbmdvb3NlID0gcmVxdWlyZSgnbW9uZ29vc2UnKTtcbnZhciBwYXNzcG9ydCA9IHJlcXVpcmUoJ3Bhc3Nwb3J0Jyk7XG52YXIgYXV0aGVudGljYXRlID0gcmVxdWlyZSgnLi9hdXRoZW50aWNhdGUnKTtcbnZhciBjb25maWcgPSByZXF1aXJlKCcuL2NvbmZpZycpO1xuXG5jb25zdCBmbGFzaCA9IHJlcXVpcmUoJ2Nvbm5lY3QtZmxhc2gnKTtcbmNvbnN0IG5vZGVtb24gPSByZXF1aXJlKCdub2RlbW9uJyk7XG5cbm1vbmdvb3NlLmNvbm5lY3QoY29uZmlnLm1vbmdvVXJsKTtcbnZhciBkYiA9IG1vbmdvb3NlLmNvbm5lY3Rpb247XG5kYi5vbignZXJyb3InLCBjb25zb2xlLmVycm9yLmJpbmQoY29uc29sZSwgJ2Nvbm5lY3Rpb24gZXJyb3I6JykpO1xuZGIub25jZSgnb3BlbicsIGZ1bmN0aW9uICgpIHtcbiAgICAvLyB3ZSdyZSBjb25uZWN0ZWQhXG4gICAgY29uc29sZS5sb2coXCJDb25uZWN0ZWQgY29ycmVjdGx5IHRvIHNlcnZlclwiKTtcbn0pO1xuXG52YXIgYXBwID0gZXhwcmVzcygpO1xuXG5cbmFwcC5hbGwoJyonLCBmdW5jdGlvbihyZXEsIHJlcywgbmV4dCl7XG4gIGNvbnNvbGUubG9nKCdyZXEgc3RhcnQ6ICcscmVxLnNlY3VyZSwgcmVxLmhvc3RuYW1lLCByZXEudXJsLCBhcHAuZ2V0KCdwb3J0JykpO1xuICBpZiAocmVxLnNlY3VyZSkge1xuICAgIHJldHVybiBuZXh0KCk7XG4gIH07XG5cbiByZXMucmVkaXJlY3QoJ2h0dHBzOi8vJytyZXEuaG9zdG5hbWUrJzonK2FwcC5nZXQoJ3NlY1BvcnQnKStyZXEudXJsKTtcbn0pO1xuLy8gdW5jb21tZW50IGFmdGVyIHBsYWNpbmcgeW91ciBmYXZpY29uIGluIC9wdWJsaWNcbi8vYXBwLnVzZShmYXZpY29uKHBhdGguam9pbihfX2Rpcm5hbWUsICdwdWJsaWMnLCAnZmF2aWNvbi5pY28nKSkpO1xuXG5hcHAudXNlKGxvZ2dlcignZGV2JykpO1xuYXBwLnVzZShib2R5UGFyc2VyLmpzb24oKSk7XG5hcHAudXNlKGJvZHlQYXJzZXIudXJsZW5jb2RlZCh7IGV4dGVuZGVkOiBmYWxzZSB9KSk7XG5hcHAudXNlKGNvb2tpZVBhcnNlcigpKTtcblxuLy8gcGFzc3BvcnQgY29uZmlnXG5hcHAudXNlKHBhc3Nwb3J0LmluaXRpYWxpemUoKSk7XG5cbmFwcC51c2UoZXhwcmVzcy5zdGF0aWMocGF0aC5qb2luKF9fZGlybmFtZSwgJ3ZpZXdzJykpKTtcbnJlcXVpcmUoJy4vcm91dGVzL2luZGV4JykoYXBwKTtcblxuLy8gY2F0Y2ggNDA0IGFuZCBmb3J3YXJkIHRvIGVycm9yIGhhbmRsZXJcbmFwcC51c2UoZnVuY3Rpb24ocmVxLCByZXMsIG5leHQpIHtcbiAgdmFyIGVyciA9IG5ldyBFcnJvcignTm90IEZvdW5kJyk7XG4gIGVyci5zdGF0dXMgPSA0MDQ7XG4gIG5leHQoZXJyKTtcbn0pO1xuXG5cbi8vIGVycm9yIGhhbmRsZXJzXG4vLyBkZXZlbG9wbWVudCBlcnJvciBoYW5kbGVyXG4vLyB3aWxsIHByaW50IHN0YWNrdHJhY2VcbmlmIChhcHAuZ2V0KCdlbnYnKSA9PT0gJ2RldmVsb3BtZW50Jykge1xuICBhcHAudXNlKGZ1bmN0aW9uKGVyciwgcmVxLCByZXMsIG5leHQpIHtcbiAgICByZXMuc3RhdHVzKGVyci5zdGF0dXMgfHwgNTAwKTtcbiAgICByZXMuanNvbih7XG4gICAgICBtZXNzYWdlOiBlcnIubWVzc2FnZSxcbiAgICAgIGVycm9yOiBlcnJcbiAgICB9KTtcbiAgfSk7XG59XG5cbi8vIHByb2R1Y3Rpb24gZXJyb3IgaGFuZGxlclxuLy8gbm8gc3RhY2t0cmFjZXMgbGVha2VkIHRvIHVzZXJcbmFwcC51c2UoZnVuY3Rpb24oZXJyLCByZXEsIHJlcywgbmV4dCkge1xuICByZXMuc3RhdHVzKGVyci5zdGF0dXMgfHwgNTAwKTtcbiAgcmVzLmpzb24oe1xuICAgIG1lc3NhZ2U6IGVyci5tZXNzYWdlLFxuICAgIGVycm9yOiB7fVxuICB9KTtcbn0pO1xuXG4vLyBpbml0IHJvdXRlc1xuXG5cbm1vZHVsZS5leHBvcnRzID0gYXBwO1xuIl19