'use strict';

var express = require('express');
var majorListRouter = express.Router();
var bodyParser = require('body-parser');

var mongoose = require('mongoose');
var UDs = require('../models/major-list');

var Verify = require('./verify');

majorListRouter.route('/').get(function (req, res, next) {
  console.log(req);
  UDs.find({ "utility_type": "degree" }, function (err, data) {
    if (err) console.log(err);
    res.json(data);
  });
}).post(function (req, res, next) {
  console.log(req);
  for (var i = 0; i < req.body.input.length; i++) {
    var major = new UDs({
      "degree_name": req.body.input[i].degree_name,
      "degree_level": req.body.input[i].degree_level
    });
    if (req.body.input[i].degree_option) {
      major.degree_option = req.body.input[i].degree_option;
    }
    major.save(function (err, ud) {
      if (err) console.log(err);
    });
  }
  res.writeHead(200, { 'Content-Type': 'text/plain' });
  res.end('Added the utility-data');
}).delete(function (req, res, next) {
  UDs.remove({}, function (err, resp) {
    if (err) return next(err);
    res.json(resp);
  });
});

module.exports = majorListRouter;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9yb3V0ZXMvbWFqb3ItbGlzdC5qcyJdLCJuYW1lcyI6WyJleHByZXNzIiwicmVxdWlyZSIsIm1ham9yTGlzdFJvdXRlciIsIlJvdXRlciIsImJvZHlQYXJzZXIiLCJtb25nb29zZSIsIlVEcyIsIlZlcmlmeSIsInJvdXRlIiwiZ2V0IiwicmVxIiwicmVzIiwibmV4dCIsImNvbnNvbGUiLCJsb2ciLCJmaW5kIiwiZXJyIiwiZGF0YSIsImpzb24iLCJwb3N0IiwiaSIsImJvZHkiLCJpbnB1dCIsImxlbmd0aCIsIm1ham9yIiwiZGVncmVlX25hbWUiLCJkZWdyZWVfbGV2ZWwiLCJkZWdyZWVfb3B0aW9uIiwic2F2ZSIsInVkIiwid3JpdGVIZWFkIiwiZW5kIiwiZGVsZXRlIiwicmVtb3ZlIiwicmVzcCIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiI7O0FBQUEsSUFBSUEsVUFBVUMsUUFBUSxTQUFSLENBQWQ7QUFDQSxJQUFJQyxrQkFBa0JGLFFBQVFHLE1BQVIsRUFBdEI7QUFDQSxJQUFJQyxhQUFhSCxRQUFRLGFBQVIsQ0FBakI7O0FBRUEsSUFBSUksV0FBV0osUUFBUSxVQUFSLENBQWY7QUFDQSxJQUFJSyxNQUFNTCxRQUFRLHNCQUFSLENBQVY7O0FBRUEsSUFBSU0sU0FBU04sUUFBUSxVQUFSLENBQWI7O0FBRUFDLGdCQUFnQk0sS0FBaEIsQ0FBc0IsR0FBdEIsRUFDQ0MsR0FERCxDQUNLLFVBQVNDLEdBQVQsRUFBYUMsR0FBYixFQUFpQkMsSUFBakIsRUFBc0I7QUFDMUJDLFVBQVFDLEdBQVIsQ0FBWUosR0FBWjtBQUNDSixNQUFJUyxJQUFKLENBQVMsRUFBQyxnQkFBZ0IsUUFBakIsRUFBVCxFQUFxQyxVQUFVQyxHQUFWLEVBQWNDLElBQWQsRUFBbUI7QUFDdEQsUUFBSUQsR0FBSixFQUFTSCxRQUFRQyxHQUFSLENBQVlFLEdBQVo7QUFDVEwsUUFBSU8sSUFBSixDQUFTRCxJQUFUO0FBQ0QsR0FIRDtBQUlELENBUEQsRUFRQ0UsSUFSRCxDQVFNLFVBQVNULEdBQVQsRUFBYUMsR0FBYixFQUFpQkMsSUFBakIsRUFBc0I7QUFDMUJDLFVBQVFDLEdBQVIsQ0FBWUosR0FBWjtBQUNBLE9BQUksSUFBSVUsSUFBRSxDQUFWLEVBQWFBLElBQUVWLElBQUlXLElBQUosQ0FBU0MsS0FBVCxDQUFlQyxNQUE5QixFQUFxQ0gsR0FBckMsRUFBeUM7QUFDdkMsUUFBSUksUUFBUSxJQUFJbEIsR0FBSixDQUFRO0FBQ2pCLHFCQUFnQkksSUFBSVcsSUFBSixDQUFTQyxLQUFULENBQWVGLENBQWYsRUFBa0JLLFdBRGpCO0FBRWpCLHNCQUFnQmYsSUFBSVcsSUFBSixDQUFTQyxLQUFULENBQWVGLENBQWYsRUFBa0JNO0FBRmpCLEtBQVIsQ0FBWjtBQUlBLFFBQUdoQixJQUFJVyxJQUFKLENBQVNDLEtBQVQsQ0FBZUYsQ0FBZixFQUFrQk8sYUFBckIsRUFBbUM7QUFDakNILFlBQU1HLGFBQU4sR0FBc0JqQixJQUFJVyxJQUFKLENBQVNDLEtBQVQsQ0FBZUYsQ0FBZixFQUFrQk8sYUFBeEM7QUFDRDtBQUNESCxVQUFNSSxJQUFOLENBQVcsVUFBU1osR0FBVCxFQUFhYSxFQUFiLEVBQWdCO0FBQ3pCLFVBQUliLEdBQUosRUFBU0gsUUFBUUMsR0FBUixDQUFZRSxHQUFaO0FBQ1YsS0FGRDtBQUdEO0FBQ0RMLE1BQUltQixTQUFKLENBQWMsR0FBZCxFQUFtQixFQUFDLGdCQUFnQixZQUFqQixFQUFuQjtBQUNBbkIsTUFBSW9CLEdBQUosQ0FBUSx3QkFBUjtBQUNELENBeEJELEVBeUJDQyxNQXpCRCxDQXlCUSxVQUFTdEIsR0FBVCxFQUFhQyxHQUFiLEVBQWlCQyxJQUFqQixFQUFzQjtBQUM1Qk4sTUFBSTJCLE1BQUosQ0FBVyxFQUFYLEVBQWUsVUFBVWpCLEdBQVYsRUFBZWtCLElBQWYsRUFBcUI7QUFDOUIsUUFBSWxCLEdBQUosRUFBUyxPQUFPSixLQUFLSSxHQUFMLENBQVA7QUFDVEwsUUFBSU8sSUFBSixDQUFTZ0IsSUFBVDtBQUNILEdBSEg7QUFJRCxDQTlCRDs7QUFnQ0FDLE9BQU9DLE9BQVAsR0FBZWxDLGVBQWYiLCJmaWxlIjoibWFqb3ItbGlzdC5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBleHByZXNzID0gcmVxdWlyZSgnZXhwcmVzcycpO1xudmFyIG1ham9yTGlzdFJvdXRlciA9IGV4cHJlc3MuUm91dGVyKCk7XG52YXIgYm9keVBhcnNlciA9IHJlcXVpcmUoJ2JvZHktcGFyc2VyJyk7XG5cbnZhciBtb25nb29zZSA9IHJlcXVpcmUoJ21vbmdvb3NlJyk7XG52YXIgVURzID0gcmVxdWlyZSgnLi4vbW9kZWxzL21ham9yLWxpc3QnKTtcblxudmFyIFZlcmlmeSA9IHJlcXVpcmUoJy4vdmVyaWZ5Jyk7XG5cbm1ham9yTGlzdFJvdXRlci5yb3V0ZSgnLycpXG4uZ2V0KGZ1bmN0aW9uKHJlcSxyZXMsbmV4dCl7XG5cdGNvbnNvbGUubG9nKHJlcSk7XG4gIFVEcy5maW5kKHtcInV0aWxpdHlfdHlwZVwiOiBcImRlZ3JlZVwifSwgZnVuY3Rpb24gKGVycixkYXRhKXtcbiAgICBpZiAoZXJyKSBjb25zb2xlLmxvZyhlcnIpO1xuICAgIHJlcy5qc29uKGRhdGEpO1xuICB9KTtcbn0pXG4ucG9zdChmdW5jdGlvbihyZXEscmVzLG5leHQpe1xuICBjb25zb2xlLmxvZyhyZXEpO1xuICBmb3IodmFyIGk9MDsgaTxyZXEuYm9keS5pbnB1dC5sZW5ndGg7aSsrKXtcbiAgICB2YXIgbWFqb3IgPSBuZXcgVURzKHtcbiAgICAgICBcImRlZ3JlZV9uYW1lXCIgOiByZXEuYm9keS5pbnB1dFtpXS5kZWdyZWVfbmFtZSxcbiAgICAgICBcImRlZ3JlZV9sZXZlbFwiOiByZXEuYm9keS5pbnB1dFtpXS5kZWdyZWVfbGV2ZWxcbiAgICB9KVxuICAgIGlmKHJlcS5ib2R5LmlucHV0W2ldLmRlZ3JlZV9vcHRpb24pe1xuICAgICAgbWFqb3IuZGVncmVlX29wdGlvbiA9IHJlcS5ib2R5LmlucHV0W2ldLmRlZ3JlZV9vcHRpb247XG4gICAgfVxuICAgIG1ham9yLnNhdmUoZnVuY3Rpb24oZXJyLHVkKXtcbiAgICAgIGlmIChlcnIpIGNvbnNvbGUubG9nKGVycik7XG4gICAgfSk7XG4gIH1cbiAgcmVzLndyaXRlSGVhZCgyMDAsIHsnQ29udGVudC1UeXBlJzogJ3RleHQvcGxhaW4nfSk7XG4gIHJlcy5lbmQoJ0FkZGVkIHRoZSB1dGlsaXR5LWRhdGEnKTtcbn0pXG4uZGVsZXRlKGZ1bmN0aW9uKHJlcSxyZXMsbmV4dCl7XG4gIFVEcy5yZW1vdmUoe30sIGZ1bmN0aW9uIChlcnIsIHJlc3ApIHtcbiAgICAgICAgaWYgKGVycikgcmV0dXJuIG5leHQoZXJyKTtcbiAgICAgICAgcmVzLmpzb24ocmVzcCk7XG4gICAgfSk7XG59KTtcblxubW9kdWxlLmV4cG9ydHM9bWFqb3JMaXN0Um91dGVyOyJdfQ==